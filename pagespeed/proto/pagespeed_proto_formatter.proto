// Copyright 2010 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: aoates@google.com (Andrew Oates)

// Protocol buffers generated by the pagespeed::ProtoFormatter formatter

syntax = "proto2";

option optimize_for = LITE_RUNTIME;
option java_package = "com.googlecode.page_speed";

package pagespeed;

message Rect {
  optional int32 left = 1;
  optional int32 top = 2;
  optional int32 width = 3;
  optional int32 height = 4;
}

// Typed format string arguments.
message FormatArgument {
  // NOTE: these must be kept in sync with kArgumentTypeToNameMap in
  // formatted_results_to_json_converter.cc.
  enum ArgumentType {
    URL = 1;
    STRING_LITERAL = 2;
    INT_LITERAL = 3;
    BYTES = 4;
    DURATION = 5;
    // Used for pre-formatted strings such as code blocks or stack traces.
    VERBATIM_STRING = 6;
    PERCENTAGE = 7;
    HYPERLINK = 8;
    SNAPSHOT_RECT = 9;
    DISTANCE = 10;
  }

  // The type of this format argument; must be present.
  optional ArgumentType type = 1;

  // The raw value to be inserted.  Only one of string or int should be used,
  // depending on the argument type:
  //   URL: string_value holds the URL to display
  //   STRING_LITERAL: string_value holds the string
  //   INT_LITERAL: int_value holds the integer
  //   BYTES: int_value holds the size, in bytes
  //   DURATION: int_value holds the duration, in milliseconds
  //   VERBATIM_STRING: string_value holds the string
  //   PERCENTAGE: int_value holds the percentage (from 0 to 100)
  //   HYPERLINK: string_value holds the URL to link to
  //   SNAPSHOT_RECT: string_value holds the snapshot key
  //   DISTANCE: int_value holds the distance, in micrometers
  optional string string_value = 2;
  optional int64 int_value = 3;

  // A localized string representing the value (e.g. in the 'fr' locale, 3900
  // bytes might be localized as '3,9 kB'); must be present.  This is filled in
  // by the localizer.
  optional string localized_value = 4;

  // The placeholder string used for this format argumet (e.g. "FILE_SIZE" or
  // "URL_1").  The HYPERLINK argument type actually uses two placeholders, for
  // the start and end of the link; in this case, if the value of
  // placeholder_key is e.g. "FOO", then the placeholder strings are
  // "BEGIN_FOO" and "END_FOO".
  optional string placeholder_key = 5;

  // Used (sometimes) by SNAPSHOT_RECT arguments; add none to refer to the
  // whole snapshot.  Also have none for other argument types.
  repeated Rect rect = 6;

  // Used (sometimes) by SNAPSHOT_RECT arguments.  Indicates ancillary rects,
  // which should be displayed e.g. in a different color.
  repeated Rect secondary_rect = 7;
}

// Pair of a format string and its arguments.
message FormatString {
  // Format string (e.g. 'You saved %(NUM_BYTES)s bytes for %(URL)s.').
  required string format = 1;
  // Format arguments (one for each of the %(FOO)s placeholders above).
  repeated FormatArgument args = 2;
}

// Formatted results for a single URL.
message FormattedUrlResult {
  // Description of the URL's results.
  required FormatString result = 1;

  // Optional additional details.
  repeated FormatString details = 2;

  // The id of the Result object associated with this URL, if any.
  optional int32 associated_result_id = 3;
}

message FormattedUrlBlockResults {
  // Header summarizing this URL block.
  optional FormatString header = 1;

  // URLs in the block.
  repeated FormattedUrlResult urls = 2;

  // The id of the Result object associated with this URL block, if any.
  optional int32 associated_result_id = 3;
}

// Formatted and structured results from one rule.
message FormattedRuleResults {
  // The rule that generated these results.
  required string rule_name = 1;

  // Formatted version of the rule name.
  required string localized_rule_name = 2;

  // A summary line to display above the list of URL blocks.  Older front-ends
  // may simply prepend this to the list of URL blocks instead.
  optional FormatString summary = 7;

  // Blocks of URLs (e.g. one for each redirect chain to be eliminated).
  repeated FormattedUrlBlockResults url_blocks = 3;

  // The per-rule score is deprecated. The 'rule_impact' value is the
  // most meaningful per-rule metric.
  // optional int32 rule_score = 4 [deprecated=true];

  // The impact number assigned by Page Speed for this rule.  Like the score,
  // this may be left out if it cannot be calculated.
  optional double rule_impact = 5;

  // The experimental bit indicate if the rule is experimental. Experimental
  // rules are new rules that we are trying out, which do not impact the
  // overall score, and are expected to either graduate to non-experimental
  // rules or else be deleted.
  optional bool experimental = 6;

  enum RuleGroup {
    SPEED = 1;
    USABILITY = 2;
    SECURITY = 3;
  }

  // Rule groups that this rule is a member of.
  repeated RuleGroup groups = 8;
}

// Formatted and localized results proto, mirroring the hiercharchy of results
// in the pagespeed::Results proto.
message FormattedResults {
  // Locale for which these results are generated.
  required string locale = 1;

  // Formatted results for each rule.
  repeated FormattedRuleResults rule_results = 2;

  // Overall score assigned by Page Speed.
  optional int32 score = 3;
}
