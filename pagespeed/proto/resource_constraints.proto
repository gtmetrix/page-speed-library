// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protocol buffers to describe load and execution constraints.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;
option java_package = "com.googlecode.page_speed";

package pagespeed;

// A location on a resource. This can be used to describe a stack frame, but
// also other locations, for example the position of a tag in an HTML resource.
message LocationFrame {
// The reference to the resource this location references to.
  required string url = 1;

  // The line number within the resource.
  required int32 line = 2;

  // The column within the resource.
  optional int32 column = 3;

  // The name of the function that was executed at this location.
  optional string function_name = 4;
}

message ResourceLoadConstraint {
  enum LoadConstraintType {
    // The resource was loaded because the parser detected it in a source file.
    PARSER = 1;
    // The resource was loaded because a respective HTML tag was added using
    // document.write().
    DOCUMENT_WRITE = 2;
    // The resource was loaded because the respective HTML node was was added
    // using scripting.
    NODE_INSERT = 3;
    // The resource was loaded because it followed a redirect.
    REDIRECT = 4;
  }

  // The type of this constraint.
  optional LoadConstraintType type = 1;

  // The resource that caused the load or blocked the evaluation.
  optional string requestor_url = 2;

  // A description of the stack frames active at the time of the event.
  repeated LocationFrame location = 3;
}

message ResourceExecConstraint {
  enum ExecConstraintType {
    // The evaluation of the resource was blocked on the UI thread, either by a
    // stylesheet or a script.
    BLOCKING = 1;
    // The evaluation of this resource was deferred until after the document
    // finished parsing.
    AFTER_PARSE = 2;
    // The evaluation of this resource is done as soon as available, however
    // not before other resources of this type are evaluated.
    ASAP_ORDERED = 3;
    // The evaluation of this resource is done as soon as its available.
    ASAP_UNORDERED = 4;
    // The execution was started on an event.
    ON_EVENT = 5;
    // The execution was started after a timeout.
    ON_TIMEOUT = 6;
  };

  // The type of this constraint.
  optional ExecConstraintType type = 1;

  // The resource that caused the load or blocked the evaluation.
  optional string predecessor_url = 2;

  // A description of the stack frames active at the time of the event.
  repeated LocationFrame location = 3;

  // The event name for EVAL_ON_EVENT.
  optional string event_name = 4;

  // The timeout that passed for EVAL_ON_TIMEOUT.
  optional int32 timeout_msec = 5;
}
